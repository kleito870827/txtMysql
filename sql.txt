database is for stock something

table   

row is the data horizontal 

column


 CREATE TABLE classics (
    -> author VARCHAR(128),
    -> title VARCHAR(128),
    -> type VARCHAR(16),
    -> year CHAR(4));
 
show tables
describe classics
ALTER TABLE classics ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT KEY;

INSERT INTO classics(author,title,type,year) VALUES('Mark Tawin','The Adventures of Tom Sawyer','Friction','1876');

select * from classics;

ALTER TABLE classics CHANGE type genre VARCHAR(16);

update classics set author_id=1;
update classics set author_id=2 where id=1;
UPDATE tasks set status='completed' WHERE status= 'la';

 ALTER TABLE classics ADD CONSTRAINT gbffbgnfnhg FOREIGN KEY (author_id) REFERENCES authors(id);
ALTER TABLE classics MODIFY year SMALLINT;

SELECT year_rank, artist, song_name, year 
FROM tutorial.billboard_top_100_year_end 

WHERE year_rank<=10 AND year >=2000
ORDER BY year desc, year_rank	

SELECT year_rank, artist, song_name, year 

FROM tutorial.billboard_top_100_year_end
 WHERE artist='Justin Timberlake' AND year >= 2007 AND year <= 2008

SELECT state, SUM(population_estimate_2012)

FROM tutorial.city_populations 

GROUP BY state
ORDER BY sum desc

select  SUM(west)  as west, SUM(midwest) as midwest, SUM(northeast) as northeast

FROM tutorial.us_housing_units 

where year >= 1983 and month = 1

select year, month, south+west+midwest+northeast as total_units 

FROM tutorial.us_housing_units 

where year >= 2008

select year, month, ROUND(south+west+midwest+northeast) as total_units 

FROM tutorial.us_housing_units 

where year >= 2008 AND year <= 2010 AND month = 7

select year, month, ROUND(south+west+midwest+northeast) as total_units 

FROM tutorial.us_housing_units 

where year = 2008 OR year = 2001 OR year = 1980 OR year = 1979
o where year IN(2008, 2001, 1980, 1979)

select year, SUM(south) as sum_south, SUM(midwest) as sum_midwest,

SUM(northeast) as sum_northeasth

FROM tutorial.us_housing_units 

where year >= 1987

GROUP BY year 
ORDER BY year asc

select year, ROUND(CAST(SUM(south) AS numeric),1) as sum_south, SUM(midwest) as sum_midwest,
SUM(northeast) as sum_northeasth

FROM tutorial.us_housing_units 

where year >= 1987

GROUP BY year 
ORDER BY year asc

select company_name, investor_name, raised_amount_usd   
FROM tutorial.crunchbase_investments 

where UPPER(company_city) = 'MIAMI' AND funding_round_type = 'angel'
AND raised_amount_usd > 0 
ORDER BY raised_amount_usd asc

SELECT company_name, SUM(raised_amount_usd) as total_amount

FROM tutorial.crunchbase_investments

GROUP BY company_name

HAVING SUM(raised_amount_usd) > (SELECT SUM(raised_amount_usd)

                                FROM tutorial.crunchbase_investments

                                WHERE company_name = 'Facebook')

ORDER BY total_amount desc

SELECT investor_name, SUM(raised_amount_usd) as total_invested

FROM tutorial.crunchbase_investments

GROUP BY investor_name

HAVING SUM(raised_amount_usd) > (SELECT SUM(raised_amount_usd)

                                FROM tutorial.crunchbase_investments

                                WHERE investor_name = 'Silver Lake Partners')

ORDER BY total_invested asc

SELECT name, continent FROM world
WHERE continent IN (SELECT continent FROM world WHERE name = 'Argentina' OR name = 'Australia')
ORDER BY name

SELECT name, CONCAT(ROUND(population/(SELECT population FROM world WHERE name = 'Germany')*100),'%') 
FROM world
WHERE continent = 'Europe'

http://sqlzoo.net/wiki/SELECT_within_SELECT_Tutorial

mysql-------
# mysql -u root -p
create database todoapp;
use todoapp;
CREATE TABLE tasks (
    -> id INT AUTO_INCREMENT NOT NULL KEY,
    -> description VARCHAR(1024) NOT NULL,
    -> uid INT NOT NULL,
    -> status VARCHAR(10));
INSERT INTO tasks (description, uid, status)
    -> VALUES('Insert a tasks into DB', 1, 'new');
select * from tasks;





